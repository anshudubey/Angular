import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "shedlock")
public class ShedLockEntity {

    @Id
    @Column(name = "name", nullable = false, length = 64)
    private String name;

    @Column(name = "lock_until", nullable = false)
    private LocalDateTime lockUntil;

    @Column(name = "locked_at", nullable = false)
    private LocalDateTime lockedAt;

    @Column(name = "locked_by", nullable = false, length = 255)
    private String lockedBy;

    protected ShedLockEntity() {
        // Required by JPA
    }

    public ShedLockEntity(String name, LocalDateTime lockUntil, LocalDateTime lockedAt, String lockedBy) {
        this.name = name;
        this.lockUntil = lockUntil;
        this.lockedAt = lockedAt;
        this.lockedBy = lockedBy;
    }

    // Getters and setters (can use Lombok instead)
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public LocalDateTime getLockUntil() {
        return lockUntil;
    }

    public void setLockUntil(LocalDateTime lockUntil) {
        this.lockUntil = lockUntil;
    }

    public LocalDateTime getLockedAt() {
        return lockedAt;
    }

    public void setLockedAt(LocalDateTime lockedAt) {
        this.lockedAt = lockedAt;
    }

    public String getLockedBy() {
        return lockedBy;
    }

    public void setLockedBy(String lockedBy) {
        this.lockedBy = lockedBy;
    }
}




************************************************************************
import org.springframework.data.jpa.repository.JpaRepository;

public interface ShedLockRepository extends JpaRepository<ShedLockEntity, String> {
}



********************************************************************************
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.time.LocalDateTime;

@Service
public class ShedLockService {

    @Autowired
    private ShedLockRepository shedLockRepository;

    /**
     * Inserts a lock if not already present.
     * Returns true if inserted, false if already exists.
     */
    public boolean insertLock(String name, int lockMinutes) {
        String hostname = getHostName();
        LocalDateTime now = LocalDateTime.now();

        ShedLockEntity lock = new ShedLockEntity(
            name,
            now.plusMinutes(lockMinutes),
            now,
            hostname
        );

        try {
            shedLockRepository.save(lock);
            return true;
        } catch (DataIntegrityViolationException e) {
            // Primary key conflict â†’ lock already exists
            return false;
        }
    }

    /**
     * Deletes a lock by name.
     */
    public void deleteLock(String name) {
        shedLockRepository.deleteById(name);
    }

    private String getHostName() {
        try {
            return InetAddress.getLocalHost().getHostName();
        } catch (UnknownHostException e) {
            return "unknown";
        }
    }
}
 ********************************************************************************
 import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/locks")
public class LockController {

    @Autowired
    private ShedLockService shedLockService;

    @PostMapping("/{lockName}")
    public String insertLock(@PathVariable String lockName) {
        boolean inserted = shedLockService.insertLock(lockName, 15);
        return inserted ? "Lock acquired" : "Lock already exists";
    }

    @DeleteMapping("/{lockName}")
    public String deleteLock(@PathVariable String lockName) {
        shedLockService.deleteLock(lockName);
        return "Lock released";
    }
}


******************************************************************************************
CREATE TABLE shedlock (
    name VARCHAR(64) NOT NULL,
    lock_until TIMESTAMP(3) NOT NULL,
    locked_at TIMESTAMP(3) NOT NULL,
    locked_by VARCHAR(255) NOT NULL,
    PRIMARY KEY (name)
);
